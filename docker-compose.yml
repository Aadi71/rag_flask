services:
  flask-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag_flask_app
    restart: unless-stopped
    ports:
      - "5001:5000"
    volumes:
      - ./app:/app/app 
    environment:
      - ANONYMIZED_TELEMETRY=False
      - FLASK_ENV=production
      - OLLAMA_BASE_URL=http://ollama:11434
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - MONGO_URI=mongodb://root:example@mongodb:27017/
      - MONGO_DB_NAME=rag_logs
    depends_on:
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_started
      mongodb:
        condition: service_started
    networks:
      - rag_network

  ollama:
    image: ollama/ollama:latest
    container_name: rag_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: rag_chromadb
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - rag_network

  mongodb:
    image: mongo:latest
    container_name: rag_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - mongo_data:/data/db
    networks:
      - rag_network

  mongo-express:
    image: mongo-express:latest
    container_name: rag_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - rag_network

volumes:
  ollama_data:
  chroma_data:
  mongo_data:

networks:
  rag_network:
    driver: bridge
